--Final Project CIS430

-- Sequence


--Created Squences for all the ID's for all Clients

create sequence client_id_seq Start With 10000000 nocycle nocache;

create sequence agency_id_seq Start With 10000000 nocycle nocache;

create sequence csmgr_id_seq Start With 10000000 nocycle nocache;


--*************************************************************************

--View 1 Client Progress Report

create or replace view v_client_PR AS

Select
	client.client_id,
	client_fname,
	client_lname,
	attend_clcomp
	attend_date
from
	client, attendance 
where client.client_id = attendance.client_id
	and attend_clcomp = true
order by client_lname, client_fname, attend_date;



--View 2 Case Manager Contact Info Report

create or replace view v_cm_contact as

Select
	csmgr_lname,
	csmgr_cell,
	csmgr_direct_phone,
	csmgr_ext,
	csmgr_email
from
	case_manager
order by csmgr_lname desc;


--View 3 A list of Clients and Case Managers for office staff (no ids)

create or replace view v_client_plus_csmgr

select
	client_fname,
	client_lname,
	csmgr_lname
from
	client, case_manager
where	
	client.csmgr_id = case_manager.csmgr_id
order by
	client_lname desc;

--View 4 List of classes

create or replace view v_class_list

select 
	class_name,
	(select class_name from class_info c1 where c.class_id = c1.class_prereq;) as 'Prereq',
	
from
	class_info c;

--View 5 List of Agencies

create or replace view v_agency_list

select
	ag_name,
	ag_st_address,
	ag_city,
	ag_state,
	ag_zip,
	ag_main_phone,
	ag_fax
from
	agency;


--*************************************************************************

-- Trigger 1

--pre-test

select * from client;

--trigger

Create or Replace Trigger client_id_trg
Before insert on client
for each row

Begin
	select 	client_id_seq.NEXTVAL
	into	:new.client_id
	from	dual;
END;
/

--trigger test

INSERT INTO CLIENT VALUES (0,'Jasmine','Y','Not','123 Grime',NULL,'Anchorage','AK','99506','907-212-3432','907-443-1581','JYNOT@hotmail.com','7777780',null);

select * from client;

--Trigger 2 adding agency trigger'd id

Create or Replace Trigger agency_id_trg
Before insert on agency
for each row

Begin
	select 	agency_id_seq.NEXTVAL
	into	:new.agency_id
	from	dual;
END;
/


--Trigger 3 add timestamp to client profile

create or replace trigger start_date_trg

Before insert on client
for each row

begin
	:new.client_startdate := sysdate;
end;
/
--Trigger 4 Trigger to prevent adding classes with a required hours less than 1

create or replace trigger less_than_one_hour_trg
before insert on class_info
for each row

begin
	if :new.class_hours_req < 1 then
	raise_application_error( -20001, 'Class Must Require at Least One Hour.');
end;
/

--Trigger 5 set inactive status to "n"

create or replace trigger set_inactive_n_trg
before insert on client
for each row

begin
	:new.Client_Inactive := 'N';
end;
/

--Trigger 6 csmgr_id add

Create or Replace Trigger csmgr_id_trg
Before insert on agency
for each row

Begin
	select 	csmgr_id_seq.NEXTVAL
	into	:new.csmgr_id
	from	dual;
END;
/




--*************************************************************************

--Function 1 Count # of Clients

create or replace function total_clients_f
return number is
	total_clients number (4) :=0;
	

begin
	select count(client_id) into total_clients
	from client;

	return total_clients;
end;
/

--Function 2 Sum of hours Enrolled

create or replace functon hours_enrolled(f_client_id number(8))
return number is
	total_hours number(4) :=0;
begin
	select sum(attend_total_hours) into total_hours
	from attendance
	where client_id = f_client_id;
	
	return(total_hours);
end;
/

--Function 3  Get CSMGR_ID for Client

create or replace function get_csmgr_id(fclient_id number)
return number is
	fcsmgr_id number(8) :=0;
BEGIN
	select csgmr_id into fcsmgr_id
	from client
	where client_id = fclient_id;

	return(fcsmgr_id);
END;
/

--Function 4 get class total hours attended

create or replace function get_hrs(fclass_id number(8))
return number is
	fhrs number :=0;
BEGIN
	select attend_total_hours into fhrs
	from class_info
	where class_id = fclass_id;

	return(fhrs);
END;
/

--Function 5 Class Completed

create or replace function total_classes (fclient_id number(8))

return number is
	ftotal_classes number(10) :=0;

BEGIN
	select count(attend_ID) into ftotal_classes
	from attendance
	where fclient_id = client_id and attend_clcomp = 'y';

	return(ftotal_classes)
END;
/
--Function 6 count number of clients for a case manager
create or replace funciton total_clients_cm (csmgr_idf in number) 

return number as 
client_count number

BEGIN
	select count(client_id) into client count
	from clients
	where csmgr_idf = csmgr_id;

	return client_count;
END;
/


--*************************************************************************

--Stored Proceedure 1 Pull a list of Clients under a Case Manager (TEST)

create or replace procedure csmgr_change_p (csmgr_id_p in number, client_id_p in number) is

BEGIN
	insert into client("CSMGR_ID")
	values (csmgr_id_p);
	where csmgr_change_p.client_id_p = client.client_id;
END;
/


--Stored Proceedure 2 Delete Client (FIXED)

CREATE PROCEDURE remove_client (client_id NUMBER) AS
   tot_client NUMBER;
   BEGIN
      DELETE FROM client
      WHERE client.client_id = remove_client.client_id;
   tot_client := tot_client - 1;
   END;
/

call remove_client (10000000);

select * from client;

--Stored Proceedure 3 Set client to inactive (TEST)

create or replace procedure client_inactive_p (client_temp in client.client_ID%type)

is client_inactive_temp varchar2 := 'y';

begin
	insert into client("Client_Inactive")
	values (client_inactive_temp);
	where client_inactive_p.client_temp = client.client_id;
end;
/
--Stored Proceedure 4 Location Analysis


set SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE location_analysis AS
BEGIN
	FOR i IN (SELECT COUNT(*) cnt, client_zip
		  FROM client
		  GROUP BY client_zip) LOOP

		IF i.client_zip = '99501' THEN
			dbms_output.put_line('I have '||i.cnt||' clients from Zipcode 99501.');
		ELSIF i.client_zip = '99502' THEN
			dbms_output.put_line('I have '||i.cnt||' clients from Zipcode 99502.');
		ELSIF i.client_zip = '99503' THEN
			dbms_output.put_line('I have '||i.cnt||' clients from Zipcode 99503.');
		ELSIF i.client_zip = '99504' THEN
			dbms_output.put_line('I have '||i.cnt||' clients from Zipcode 99504.');
		ELSIF i.client_zip = '99505' THEN
			dbms_output.put_line('I have '||i.cnt||' clients from Zipcode 99505.');
		ELSIF i.client_zip = '99506' THEN
			dbms_output.put_line('I have '||i.cnt||' clients from Zipcode 99506.');
		ELSIF i.client_zip = '99507' THEN
			dbms_output.put_line('I have '||i.cnt||' clients from Zipcode 99507.');
		ELSIF i.client_zip = '99508' THEN
			dbms_output.put_line('I have '||i.cnt||' clients from Zipcode 99508.');
		ELSIF i.client_zip = '99509' THEN
			dbms_output.put_line('I have '||i.cnt||' clients from Zipcode 99509.');

		END IF;
	END LOOP;

END location_analysis;


--Stored Proceedure 5 Oldest Active Client

Set serveroutput on;
create or replace procedure oldest_client as

BEGIN
FOR i IN (SELECT client_fname, client_lname
		  FROM client
		  WHERE client_id = (SELECT MIN(client_id)
			             FROM client) and client_inactive = 'n'
                  ) 
  LOOP

		dbms_output.put_line('Our oldest active client is '||i.client_fname||' '||i.client_lname);
	END LOOP;

end oldest_client;

execute oldest_client;

--Stored Proceedure 6 Newest Client
Set serveroutput on;
create or replace procedure newest_client as

BEGIN
FOR i IN (SELECT client_fname, client_lname
		  FROM client
		  WHERE client_id = (SELECT max(client_id)
			             FROM client) and client_inactive = 'n'
                  ) 
  LOOP

		dbms_output.put_line('Our newest active client is '||i.client_fname||' '||i.client_lname);
	END LOOP;

end newest_client;

execute newest_client;
